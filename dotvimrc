" Turning off compatability with vi
set nocompatible

" Allowing for more precise syntax highlight of Fortran code
let fortran_more_precise=1

" Allow free from Fortran.
let fortran_free_source=1

" Enforce fixed source.
"let fortran_fixed_source=1

" Ignore whitespace when diffing files.
"set diffopt+=iwhite -- This doesn't seem to work on Mac.

" Search as you type
set incsearch

" Setting memory/number of lines that can be copied
set viminfo='100,<1000,s100,h

" Increasing the number of lines that can be yanked
set viminfo+=<500

" Make backspace behave in a sane manner.
set backspace=indent,eol,start

" Turning on wildmenu to help with opening files
set wildmenu

" Switch syntax highlighting on
syntax on

" Default to not read-only in vimdiff.
set noro

" Call vim-plug
call plug#begin(expand('~/.vim/plugged'))

" Specify plugins.
Plug 'vim-airline/vim-airline'
"Plug 'vim-syntastic/syntastic'
Plug 'preservim/nerdtree'
Plug 'godlygeek/tabular'
Plug 'arcticicestudio/nord-vim'
Plug 'ctrlpvim/ctrlp.vim'
"Plug 'jonathanfilip/vim-lucius'
"Plug 'vim-airline/vim-airline-themes'
"Plug 'reedes/vim-colors-pencil'
Plug 'dense-analysis/ale'
Plug 'heavenshell/vim-pydocstring', { 'do': 'make install', 'for': 'python' }
Plug 'https://github.com/tpope/vim-fugitive'
if has('nvim') || has('patch-8.0.902')
  Plug 'mhinz/vim-signify'
else
  Plug 'mhinz/vim-signify', { 'branch': 'legacy' }
endif
call plug#end()

" Set pydocstring format to google.
let g:pydocstring_formatter = 'google'

" Customize ALE.
let g:ale_sign_error = '>>'
let g:ale_sign_warning = '--'
let g:ale_virtualtext_cursor=0

" Turn on powerline symbols.
let g:airline_powerline_fonts = 0

" Turn off file filetype and encoding sections.
let g:airline_section_x = ''
let g:airline_section_y = ''

" Customize position in file display.
let g:airline_section_z = '%3p%% C:%3c'

" Turn on extensions for signify.
let g:airline#extensions#hunks#enabled=1

" Make signify work in real time.
let g:signify_realtime=1

" Specify working path mode.
let g:ctrlp_working_path_mode='..ra'

" Enable file type detection and do language-dependent indenting.
filetype plugin indent on

" Mapping tabnext and tabprev to F8 and F7
map <F7> :tabp <CR>
map <F8> :tabn <CR>

" Mapping paste mode to F2
set pastetoggle=<F2>

" Setting tabs
set tabstop=2
set shiftwidth=2
set expandtab
set softtabstop=0

" Some settings to speed up vim and avoid scrolling problems
set ttyfast

" Setting tabs for MATLAB files
autocmd Filetype matlab setlocal expandtab tabstop=4 shiftwidth=4
autocmd Filetype yaml setlocal expandtab tabstop=2 shiftwidth=2

"Remove all trailing whitespace by pressing F5
nnoremap <F5> :let _s=@/<Bar>:%s/\s\+$//e<Bar>:let @/=_s<Bar><CR>

" Turning on relative numbering
set number
set relativenumber

" Showing the cursorline
set cursorline

" This is so that the file is opened back to the same line as before
if has("autocmd")
  au BufReadPost * if line("'\"") > 0 && line("'\"") <= line("$")
    \| exe "normal! g'\"" | endif
endif

" Disabling auto-commenting (i.e., continuing comments when inserting new lines)
autocmd FileType * setlocal formatoptions-=c formatoptions-=r formatoptions-=o

" Some file associations
au BufNewFile,BufRead *.glf setlocal ft=tcl
au BufNewFile,BufRead *.cls setlocal ft=tex
au BufNewFile,BufRead *.m setlocal ft=matlab
au BufNewFile,BufRead *.md setlocal ft=markdown
au BufNewFile,BufRead *.asy setlocal ft=c
au BufNewFile,BufRead *.fun setlocal ft=fortran

" Highlighting searches
set hlsearch

" Remapping noh to \
nnoremap \ :noh<return>

" Setting scroll so that cursor leaves 4 lines
set scrolloff=4

" Setup syntastic.
let g:syntastic_mode_map = {
    \ "mode": "passive",
    \ "active_filetypes": ["python","matlab"],
    \ "passive_filetypes": ["tex","c"] }

"set statusline+=%#warningmsg#
"set statusline+=%{SyntasticStatuslineFlag()}
"set statusline+=%*

" Set to 256 color.
set t_Co=256

" Set dark theme.
set background=dark
colorscheme nord
"colorscheme gruvbox

" Define light theme.
"set background=light
"colorscheme lucius
"LuciusLight
"let g:airline_theme = 'pencil'

" Displaying some unprintable characters
set list          " Display unprintable characters f12 - switches
set listchars=tab:·\ ,trail:·,extends:»,precedes:« " Unprintable chars mapping

" Define key mappings.
nnoremap <Leader>w :set wrap!<return>
nnoremap <Leader>sp :set spell<return>

" air-line
let g:airline_powerline_fonts = 1

if !exists('g:airline_symbols')
    let g:airline_symbols = {}
endif

" unicode symbols
let g:airline_left_sep = ''
let g:airline_right_sep = ''
"let g:airline_left_sep = '▶'
"let g:airline_right_sep = '◀'
"let g:airline_symbols.linenr = '␊'
"let g:airline_symbols.linenr = '␤'
"let g:airline_symbols.linenr = '¶'
"let g:airline_symbols.branch = '⎇'
"let g:airline_symbols.paste = 'ρ'
"let g:airline_symbols.paste = 'Þ'
"let g:airline_symbols.paste = '∥'
"let g:airline_symbols.whitespace = 'Ξ'

" airline symbols
"let g:airline_left_sep = ''
"let g:airline_left_alt_sep = ''
"let g:airline_right_sep = ''
"let g:airline_right_alt_sep = ''
"let g:airline_symbols.branch = ''
"let g:airline_symbols.readonly = ''
"let g:airline_symbols.linenr = ''
